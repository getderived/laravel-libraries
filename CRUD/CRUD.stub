<?php

/**
 * Template for CRUD Rest Controller
 * - Localization Ready
 * - Ajax ready
 */

// Copy this file as     Admin/yourNewModelController.php
// Copy and edit         CRUD/views/*.blade.php

// Replace all CaseSensitive string occurences of "Item" => "YourModel"
// Replace all CaseSensitive string occurences of "item" => "yourModel"

// Add route:                   Route::resource('items','ItemsController');     @ adminRoutes.php
// Create FormRequest:          artisan make:request Admin\ItemRequest
// Create Model:                artisan make:model Models\Item
// Create Policy or Define      artisan make:policy ItemPolicy                  @ AuthServiceProvider.php
// Create Route Binding:        $router->model('items','App\Models\Item');      @ RouteServiceProvider.php
// Create Migration:            artisan make:migration create_items_table --create=items
// Create Seeder:               artisan make:seeder ItemsSeeder
// Run migrations               artisan migrate:refresh --seed

namespace App\Http\Controllers\Admin;

use App\Http\Requests\Admin\ItemRequest;
use App\Models\Item;
use App\Http\Requests;
use App\Http\Controllers\Controller;

class ItemsController extends Controller {

	public function __construct() 	{
		parent::__construct();
		$this->title(trans('messages.items.entities'));
	}

	public function index() {
		$item = new Item();
		$this->authorize('index',$item);
		$items = Item::with('updator')->get();
		return view('admin.items.index',compact('item','items'));
	}

	public function create()  {
		$item = new Item();
		$this->authorize('create',$item);
		$this->addMenuNode(trans('messages.items.menu'),trans('messages.create'));
		return \Ajax::view('admin.items.create',compact('item'));
	}

	public function store(ItemRequest $request)    {
		$request->save();
		\Session::flash('success',trans('messages.items.store_success'));
		return \Ajax::redirect(route('admin.items.index'));
	}

	public function show(Item $item)   {
		$this->authorize('show',$item);
		$this->addMenuNode(trans('messages.items.menu'),trans('messages.detail'));
		return \Ajax::view('admin.items.show',compact('item'));
	}

	public function edit(Item $item)    {
		$this->authorize('edit',$item);
		$this->addMenuNode(trans('messages.items.menu'),trans('messages.edit'));
		return \Ajax::view('admin.items.edit',compact('item'));
	}

	public function update(ItemRequest $request, Item $item)    {
		$request->save();
		\Session::flash('success',trans('messages.items.update_success'));
		return \Ajax::redirect(route('admin.items.index'));
	}

	public function destroy(Item $item)    {
		$this->authorize('destroy',$item);
		$item->delete();
		\Session::flash('warning',trans('messages.items.delete_success'));
		return \Ajax::redirect(route('admin.items.index'));
	}
}


/**
 *  Menu Root Node   @ App\Services\MenuFactory.php
 */

$menu->add(trans('messages.items.menu'),['route' => 'admin.items.index'])
	->data('icon','fa fa-cube')
	->data('allow', \Gate::allows('index',new \App\Models\Item()));

// Copy and translate    /resources/lang/(cz|en)/messages.php  (copy items section)

/**
 * Copy and translate this section to @ resources/lang/cz/messages.php
 */

'items' => [
	'menu' => 'Items',
	'entities' => 'Items',
	'entity' => 'Item',
	'create' => 'Vytvořit item',
	'edit' => 'Upravit item',
	'delete' => 'Smazat item',
	'list' => 'Seznam item',
	'save' => 'Uložit item',
	'store_success' => 'Item byla vytvořena.',
	'update_success' => 'Item byla upravena.',
	'delete_success' => 'Item byla smazána!',
],

/**
 * Copy and translate this section to @ resources/lang/en/messages.php
 */

'items' => [
	'menu' => 'Items',
	'entities' => 'Items',
	'entity' => 'Item',
	'create' => 'Create Item',
	'edit' => 'Edit Item',
	'delete' => 'Delete Item',
	'list' => 'Item List',
	'save' => 'Save Item',
	'store_success' => 'Item has been successfully created.',
	'update_success' => 'Item has been successfully updated.',
	'delete_success' => 'Item has been deleted!'
],


/**
 * Template for CRUD FormRequest
 */

namespace App\Http\Requests\Admin;

use App\Http\Requests\Request;
use App\Models\Item;

class ItemRequest extends Request
{
	/**
	 * Determine if the user is authorized to make this request.
	 *
	 * @return bool
	 */
	public function authorize() {
		return \Gate::allows('save',$this->model());
	}

	/**
	 * Get the validation rules that apply to the request.
	 *
	 * @return array
	 */
	public function rules() {
		return [
			//
		];
	}

	public function save(){
		$item = $this->model();
		$data = $this->only($item->getFillable());
		$item->fill($data);

		throw new \Exception('Must be Implemented');

		$item->save();
	}

	/**
	 * @return Item
	 */
	public function model(){
		return $this->modelFromRouteOr(new Item());
	}
}

/**
 * Template for CRUD Policy
 */

namespace App\Policies;

use App\Models\Item;
use App\Models\User;
use Illuminate\Auth\Access\HandlesAuthorization;

class ItemPolicy
{
	use HandlesAuthorization;

	/**
	 * Create a new policy instance.
	 *
	 * @return void
	 */
	public function __construct()	{

	}

	public function save(User $user, Item $item)	{
		if ( $item->exists) {
			return $this->edit($user,$item);
		}
		return  $this->create($user,$item);
	}

	public function create(User $user, Item $item)	{
		return false; //only admins
	}

	public function edit(User $user, Item $item){
		return false;
	}

	public function index(User $user, Item $item)	{
		return false; //only admins
	}

	public function show(User $user, Item $item){
		return false;
	}

	public function destroy(User $user, Item $item){
		return false;
	}
}
