<?php

/**
 *	@Model Model
 *  @author <dan@brainz.cz>
 *	@generated by bAdmin
 */

namespace @ModelNamespace;

use App\Traits\CreatedBy;
use App\Traits\Publishable;
use App\Traits\UpdatedBy;
use Codesleeve\Stapler\ORM\EloquentTrait;
use Codesleeve\Stapler\ORM\StaplerableInterface;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class @Model extends Model implements StaplerableInterface {
	use EloquentTrait;
	use Publishable;
	use CreatedBy;
	use UpdatedBy;
//	use SoftDeletes;

	const TYPE_A = 1, TYPE_B = 2, TYPE_C = 3;

	protected $table = "@entities";

	protected $fillable = ['name','type','text','check','upload','image', '@relation_id', 'price',
		'published_from','published_to','date','month'
	];

	protected $dates = ['created_at','updated_at','published_from','published_to','month', 'date'];

	public function __construct(array $attributes = []) {
		$this->hasAttachedFile('upload');
		$this->hasAttachedFile('image',[
			'styles'=> [
				'thumb' => '200x200',
				'cropped' => '50x50#'
			]
		]);
		parent::__construct($attributes);
	}

	public function types($selected = null){
		$options = [
			self::TYPE_A => "Type A",
			self::TYPE_B => 'Type B',
			self::TYPE_C => 'Type C'
		];
		return \Util::optionsOrLabel($options,$selected);
	}

	public function monthFormatted(){
		return $this->month
			? $this->month->format( config('bootstrapForm.month_format') )
			: null;
	}

    //Getters
    public function get@RelationIdsAttribute(){
         return $this->@relations->pluck('id')->all();
    }
    //Relations

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
     */
    public function @relations(){
        return $this->belongsToMany(@Relation::class);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function @relation(){
        return $this->belongsTo(@Relation::class);
    }


	public function delete(){
        $this->@relations()->sync([]);
        parent::delete();
    }

}
